quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
library(fastml)
library(dplyr)
# Binary classification version of iris
iris_bin <- iris %>%
filter(Species != "setosa") %>%
mutate(Species = factor(Species))
head(iris_bin)
result <- fastml(
data        = iris_bin,
label       = "Species",
algorithms  = c("logistic_reg",           # classical baseline
"svm_rbf",                # nonâ€‘linear margin
"rand_forest",            # ensemble tree
"xgboost")               # gradient boosting
)
result <- fastml(
data        = iris_bin,
label       = "Species",
algorithms  = c("logistic_reg",
"svm_rbf",
"rand_forest",
"xgboost")
)
summary(result)
plot(result, type = "bar")
plot(result, type = "roc")
plot(result, type = "calibration")
?plot.fastml
plot(result, algorithm = "rand_forest", type = "calibration")
library(fastml)
library(dplyr)
# Binary classification version of iris
iris_bin <- iris %>%
filter(Species != "setosa") %>%
mutate(Species = factor(Species))
head(iris_bin)
result <- fastml(
data        = iris_bin,
label       = "Species",
algorithms  = c("logistic_reg",
"svm_rbf",
"rand_forest",
"xgboost")
)
result <- fastml(
data        = iris_bin,
label       = "Species",
algorithms  = c("logistic_reg",
"svm_rbf",
"rand_forest",
"xgboost")
)
summary(result, type = "metrics")
summary(result, type = "params")
summary(result, type = "conf_mat")
new_obs <- iris_bin %>% slice_sample(n = 5) %>% sanitize()
predict(result$best_model[[1]],  new_obs, type = "class")
predict(result$best_model[[1]],  new_obs, type = "prob")
fastexplain(result)
quarto::quarto_render()
quarto::quarto_render()
?fastml
summary(result, type = "metrics")
summary(result, type = "params")
summary(result, type = "conf_mat")
plot(result, type = "bar")
fastexplain(result)
plot(result, type = "roc", algorithm = "rand_forest")
plot(result, type = "roc")
plot(result, type = "roc", algorithm = "logistic_reg")
plot(result, type = "calibration", algorithm = c("xgboost", "logistic_reg"))
plot(result, type = "calibration", algorithm = c("logistic_reg"))
plot(result, type = "calibration", algorithm = c("xgboost"))
plot(result, type = "calibration", algorithm = c("logistic_reg"))
plot(result, type = "calibration", algorithm = c("logistic_reg"))
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render(),
quarto::quarto_render()
library(fastml)
library(dplyr)
library(modeldata)   # provides the Ames housing data
data(ames)
ames(ames)[names(ames) == "Sale_Price"] <- "Sale_Price"  # target already named
data(ames)
ames
library(fastml)
library(dplyr)
library(modeldata)   # provides the Ames housing data
data(ames)
ames[names(ames) == "Sale_Price"] <- "Sale_Price"  # target already named
library(fastml)
library(dplyr)
library(modeldata)
data(pima_diabetes)
# View the structure
glimpse(pima_diabetes)
data(pima_diabetes)
library(fastml)
library(dplyr)
library(mlbench)
install.packages("mlbench")
library(fastml)
library(dplyr)
library(mlbench)
data(PimaIndiansDiabetes)
# View the structure
glimpse(PimaIndiansDiabetes)
library(fastml)
library(dplyr)
library(mlbench)
data(PimaIndiansDiabetes)
# View the structure
glimpse(PimaIndiansDiabetes)
?fastml
result <- fastml(
data       = pima_reg,
label      = "BMI",
algorithms = c("linear_reg", "svm_rbf", "rand_forest", "xgboost"),
resampling_method = "cv",   # 10-fold cross-validation
folds      = 10,
tune       = TRUE,          # enable hyperparameter tuning
metric     = "rmse",        # optimize for root mean squared error
n_cores    = 4              # parallel processing for speed
)
result <- fastml(
data       = PimaIndiansDiabetes,
label      = "mass",
algorithms = c("linear_reg", "svm_rbf", "rand_forest", "xgboost"),
)
PimaIndiansDiabetes
result <- fastml(
data       = PimaIndiansDiabetes[-9],
label      = "mass",
algorithms = c("linear_reg", "svm_rbf", "rand_forest", "xgboost"),
)
summary(PimaIndiansDiabetes)
summary(result)
# Prepare dataset: rename 'mass' to 'BMI' and drop 'diabetes'
pima_reg <- PimaIndiansDiabetes %>%
rename(BMI = mass) %>%
select(-diabetes) %>%
filter(BMI > 0)  # remove invalid BMI values (e.g., 0)
pima_reg
library(fastml)
library(dplyr)
library(mlbench)
data(PimaIndiansDiabetes)
# Prepare dataset: rename 'mass' to 'BMI' and drop 'diabetes'
pima_reg <- PimaIndiansDiabetes %>%
rename(BMI = mass) %>%
select(-diabetes) %>%
filter(BMI > 0)  # remove invalid BMI values (e.g., 0)
pima_reg
result <- fastml(
data       = pima_reg,
label      = "BMI",
algorithms = c("linear_reg", "svm_rbf", "rand_forest", "xgboost"),
)
summary(result, type = "metrics")
result <- fastml(
data       = pima_reg,
label      = "BMI"
# algorithms = c("linear_reg", "svm_rbf", "rand_forest", "xgboost"),
)
summary(result, type = "metrics")
result <- fastml(
data       = pima_reg,
label      = "glucose"
# algorithms = c("linear_reg", "svm_rbf", "rand_forest", "xgboost"),
)
summary(result, type = "metrics")
result <- fastml(
data       = pima_reg,
label      = "BMI",
algorithms = c("linear_reg", "svm_rbf", "rand_forest", "lightgbm"),
)
summary(result, type = "metrics")
plot(result, type = "bar")
result$best_model_name
print(result$best_model[[1]])
print(result$best_model)
result$best_model
summary(result, type = "params")
result$best_model_name
result$best_model
summary(result, type = "params")
# Sample 5 new observations
new_obs <- pima_reg %>%
slice_sample(n = 5)
new_obs
# Sample 5 new observations
new_obs <- pima_reg %>%
slice_sample(n = 5) %>%
select(-BMI)  # Ensures preprocessing matches training
# Sample 5 new observations
new_obs <- pima_reg %>%
slice_sample(n = 5) %>%
select(-"BMI")  # Ensures preprocessing matches training
pima_reg
# Sample 5 new observations
new_obs <- pima_reg %>%
slice_sample(n = 5) %>%
dplyr::select(-"BMI")  # Ensures preprocessing matches training
new_obs
library(dplyr)
# Sample 5 new observations
new_obs <- pima_reg %>%
slice_sample(n = 5) %>%
dplyr::select(-"BMI")  # Ensures preprocessing matches training
# Sample 5 new observations
new_obs <- pima_reg %>%
slice_sample(n = 5) %>%
dplyr::select(-BMI)
new_obs
# Sample 5 new observations
new_obs <- pima_reg %>%
slice_sample(n = 5) %>%
dplyr::select(-BMI)
new_obs
predict(result, new_obs)
fastexplain(reg_result)
fastexplain(result)
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
?fastml
library(fastml)
?fastml
data(iris)
iris <- iris[iris$Species != "setosa", ]  # Binary classification
iris$Species <- factor(iris$Species)
# Train models
model <- fastml(
data = iris,
label = "Species",
algorithms = c("rand_forest", "xgboost", "svm_rbf"), algorithm_engines = c(
list(rand_forest = c("ranger","aorsf", "partykit", "randomForest")))
)
summary(model, select="metrics")
summary(model, type="metrics")
