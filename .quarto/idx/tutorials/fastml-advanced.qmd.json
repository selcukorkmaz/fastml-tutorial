{"title":"Advanced Workflows with fastml()","markdown":{"yaml":{"title":"Advanced Workflows with fastml()","format":"html","editor":"visual"},"headingText":"3.2 Adaptive Racing (ANOVA)","containsRefs":false,"markdown":"\n  # Why an Advanced Tutorial?\n\n  `fastml()` handles 90 % of day‑to‑day modelling out‑of‑the‑box, but real projects often need more control.\nThis guide dives into the **power‑user levers**:\n\n  * Custom **recipes** (feature engineering, text / time features)\n* Alternative **hyper‑parameter search** strategies (Bayesian, adaptive racing)\n* **Parallel** and **distributed** engines (multi‑core, *sparklyr*, *h2o*)\n* **Stacking / ensembling** multiple `fastml` runs\n* **Learning curves** and automated model monitoring\n\nWe assume you’ve worked through the classification and regression tutorials.\n\n---\n\n  ## 1 · Set‑up\n\n  ```r\nlibrary(fastml)\nlibrary(tidymodels)\nlibrary(dplyr)\n\ndata(\"credit_data\", package = \"modeldata\")\ncredit_data <- credit_data %>%\n  mutate(Status = factor(Status, levels = c(\"good\", \"bad\")))\n```\n\nWe’ll predict **credit status** (binary classification). The dataset contains wide ordinals, categoricals, and numeric predictors — perfect for advanced preprocessing.\n\n---\n\n  ## 2 · Custom Recipe\n\n  Below we:\n\n  1. **Impute** missing numerics with KNN; categoricals with the mode.\n2. **Create** interaction terms (`Income × Limit`).\n3. **Normalize** numeric predictors.\n4. **Collapse infrequent factor levels** (< 3 %).\n\n```r\ncredit_rec <- recipe(Status ~ ., data = credit_data) %>%\n  step_impute_knn(all_numeric_predictors()) %>%\n  step_impute_mode(all_nominal_predictors()) %>%\n  step_interact(terms = ~ Income:Limit) %>%\n  step_other(all_nominal_predictors(), threshold = 0.03) %>%\n  step_dummy(all_nominal_predictors()) %>%\n  step_normalize(all_numeric_predictors())\n```\n\n> If you supply `recipe = credit_rec` to `fastml()` **internal preprocessing (imputation/encoding/scaling) is skipped**, preventing conflicts.\n\n---\n\n  ## 3 · Tuning Strategies\n\n  ### 3.1 Bayesian Optimisation\n\n  ```r\nbayes_res <- fastml(\n  data       = credit_data,\n  label      = \"Status\",\n  algorithms = c(\"rand_forest\", \"xgboost\"),\n  metric     = \"roc_auc\",\n  resampling_method = \"cv\",\n  folds      = 5,\n  recipe     = credit_rec,\n  tuning_strategy   = \"bayes\",\n  tuning_iterations = 40,      # iterations after the 10‑point space‑filling start\n  early_stopping    = TRUE,    # stop when no improvement for 5 iters\n  n_cores           = 6,\n  seed              = 2025)\n```\n\nBayesian search explores the hyper‑parameter space efficiently, especially when evaluation is costly.\n\n\n```r\nrace_res <- fastml(\n  data       = credit_data,\n  label      = \"Status\",\n  algorithms = c(\"rand_forest\", \"xgboost\"),\n  recipe     = credit_rec,\n  metric     = \"roc_auc\",\n  adaptive   = TRUE,           # enables `finetune::tune_race_anova()`\n  tuning_strategy = \"grid\",   # initial grid; racing drops losers\n  folds      = 10,\n  n_cores    = 6,\n  seed       = 2025)\n```\n\nRacing aggressively prunes poor combos early; handy for large grids.\n\n---\n\n  ## 4 · Parallel & Distributed Engines\n\n  ### 4.1 Multi‑core (doFuture)\n\n  `fastml()` automatically parallelises when `n_cores > 1`:\n\n  ```r\nlibrary(doFuture)\nregisterDoFuture()\n\nplan(multisession, workers = 8)  # or multicore on Linux/macOS\n```\n\n### 4.2 Spark Cluster\n\n```r\nlibrary(sparklyr)\nsc <- spark_connect(master = \"spark://my‑cluster:7077\")\n\nspark_res <- fastml(\n  data       = credit_data,\n  label      = \"Status\",\n  algorithms = c(\"rand_forest\", \"linear_reg\"),\n  algorithm_engines = list(rand_forest = \"spark\",\n                           linear_reg  = \"spark\"),\n  metric     = \"roc_auc\",\n  n_cores    = 4)  # number of executor cores per worker\n```\n\n> Spark engines (*sparklyr* wrappers) offload model fitting to the cluster while `fastml` coordinates.\n\n### 4.3 H2O AutoML + fastml API\n\n```r\nlibrary(h2o)\nh2o.init(nthreads = -1)\n\nh2o_res <- fastml(\n  data       = credit_data,\n  label      = \"Status\",\n  algorithms = c(\"rand_forest\", \"logistic_reg\"),\n  algorithm_engines = list(rand_forest  = \"h2o\",\n                           logistic_reg = \"h2o\"),\n  metric     = \"roc_auc\",\n  impute_method = \"h2o\",   # optional custom imputation function\n  n_cores    = 4)\n```\n\n---\n\n  ## 5 · Learning Curves & Monitoring\n\n  ```r\nlc_res <- fastml(\n  data           = credit_data,\n  label          = \"Status\",\n  algorithms     = c(\"xgboost\"),\n  learning_curve = TRUE,\n  folds          = 5)\n```\n\nThe built‑in learning curve shows **ROC AUC** vs training fraction, helping spot under‑/over‑fitting.\n\n---\n\n  ## 6 · Ensembling / Stacking\n\n  While `fastml()` returns individual models, you can ensemble their predictions easily.\n\n```r\npred_dfs <- bayes_res$predictions  # nested list\n\n# Extract probabilities for the positive class across models\nprobs <- purrr::map_df(pred_dfs, ~ .x[[1]][, c(\".pred_bad\")], .id = \"Model\") %>%\n  bind_cols(truth = rep(credit_data$Status, times = length(pred_dfs)))\n\n# Simple average ensemble\nprobs$avg <- probs %>%\n  select(starts_with(\".pred_\")) %>%\n  rowMeans()\n\nlibrary(yardstick)\nroc_auc(probs, truth = truth, avg)\n```\n\nFor a tidy stacking pipeline use the **`stacks`** package and supply `fastml` workflows as candidates.\n\n---\n\n  ## 7 · Custom Metrics\n\n  Pass any `yardstick`-compatible summariser via `summaryFunction`.\n\n```r\ngeometric_mean <- function(data, ...) {\n  yardstick::mcc(data, ...)  # Matthew’s correlation coefficient as example\n}\n\ncustom_res <- fastml(\n  data      = credit_data,\n  label     = \"Status\",\n  algorithms = c(\"rand_forest\", \"xgboost\"),\n  summaryFunction = geometric_mean,\n  metric    = \"mcc\")\n```\n\n---\n\n  ## 8 · Save & Reload Best Model\n\n  ```r\nbest_wf <- bayes_res$best_model[[1]]\n\ntidymodels::write_rds(best_wf, \"models/best_credit_model.rds\")\n\n# later...\nloaded_wf <- readr::read_rds(\"models/best_credit_model.rds\")\npredict(loaded_wf, new_data = credit_data[1:3, ])\n```\n\n---\n\n  ## 9 · Frequently Asked Questions\n\n  | Question                                                       | Answer                                                                                                                                   |\n  | -------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |\n  | *“Can I tune across multiple engines for the same algorithm?”* | Yes – supply `algorithm_engines = list(rand_forest = c(\"ranger\", \"partykit\"))`. Each engine is tuned independently.                      |\n  | *“Why does tuning seem slow?”*                                 | Check `n_cores`, reduce `folds`, or switch to adaptive racing.                                                                           |\n  | *“How do I use a grouped time‑series CV?”*                     | Prepare `rsample::vfold_cv` object yourself and pass via `resampling_method = \"none\"`, then supply `resamples` (coming in next release). |\n\n  ---\n\n  ## 10 · Where to Next?\n\n  * **Explainability**: revisit `fastexplain()` with SHAP & PDPs on your best model.\n* **Production**: convert workflow to a **`vetiver`** model for API deployment.\n* **Automated monitoring**: schedule `fastml` re‑training with **GitHub Actions** or `cronR`.\n\nHappy modelling!\n\n  ---\n\n  ### Session Info\n\n  ```r\nsessionInfo()\n```\n","srcMarkdownNoYaml":"\n  # Why an Advanced Tutorial?\n\n  `fastml()` handles 90 % of day‑to‑day modelling out‑of‑the‑box, but real projects often need more control.\nThis guide dives into the **power‑user levers**:\n\n  * Custom **recipes** (feature engineering, text / time features)\n* Alternative **hyper‑parameter search** strategies (Bayesian, adaptive racing)\n* **Parallel** and **distributed** engines (multi‑core, *sparklyr*, *h2o*)\n* **Stacking / ensembling** multiple `fastml` runs\n* **Learning curves** and automated model monitoring\n\nWe assume you’ve worked through the classification and regression tutorials.\n\n---\n\n  ## 1 · Set‑up\n\n  ```r\nlibrary(fastml)\nlibrary(tidymodels)\nlibrary(dplyr)\n\ndata(\"credit_data\", package = \"modeldata\")\ncredit_data <- credit_data %>%\n  mutate(Status = factor(Status, levels = c(\"good\", \"bad\")))\n```\n\nWe’ll predict **credit status** (binary classification). The dataset contains wide ordinals, categoricals, and numeric predictors — perfect for advanced preprocessing.\n\n---\n\n  ## 2 · Custom Recipe\n\n  Below we:\n\n  1. **Impute** missing numerics with KNN; categoricals with the mode.\n2. **Create** interaction terms (`Income × Limit`).\n3. **Normalize** numeric predictors.\n4. **Collapse infrequent factor levels** (< 3 %).\n\n```r\ncredit_rec <- recipe(Status ~ ., data = credit_data) %>%\n  step_impute_knn(all_numeric_predictors()) %>%\n  step_impute_mode(all_nominal_predictors()) %>%\n  step_interact(terms = ~ Income:Limit) %>%\n  step_other(all_nominal_predictors(), threshold = 0.03) %>%\n  step_dummy(all_nominal_predictors()) %>%\n  step_normalize(all_numeric_predictors())\n```\n\n> If you supply `recipe = credit_rec` to `fastml()` **internal preprocessing (imputation/encoding/scaling) is skipped**, preventing conflicts.\n\n---\n\n  ## 3 · Tuning Strategies\n\n  ### 3.1 Bayesian Optimisation\n\n  ```r\nbayes_res <- fastml(\n  data       = credit_data,\n  label      = \"Status\",\n  algorithms = c(\"rand_forest\", \"xgboost\"),\n  metric     = \"roc_auc\",\n  resampling_method = \"cv\",\n  folds      = 5,\n  recipe     = credit_rec,\n  tuning_strategy   = \"bayes\",\n  tuning_iterations = 40,      # iterations after the 10‑point space‑filling start\n  early_stopping    = TRUE,    # stop when no improvement for 5 iters\n  n_cores           = 6,\n  seed              = 2025)\n```\n\nBayesian search explores the hyper‑parameter space efficiently, especially when evaluation is costly.\n\n### 3.2 Adaptive Racing (ANOVA)\n\n```r\nrace_res <- fastml(\n  data       = credit_data,\n  label      = \"Status\",\n  algorithms = c(\"rand_forest\", \"xgboost\"),\n  recipe     = credit_rec,\n  metric     = \"roc_auc\",\n  adaptive   = TRUE,           # enables `finetune::tune_race_anova()`\n  tuning_strategy = \"grid\",   # initial grid; racing drops losers\n  folds      = 10,\n  n_cores    = 6,\n  seed       = 2025)\n```\n\nRacing aggressively prunes poor combos early; handy for large grids.\n\n---\n\n  ## 4 · Parallel & Distributed Engines\n\n  ### 4.1 Multi‑core (doFuture)\n\n  `fastml()` automatically parallelises when `n_cores > 1`:\n\n  ```r\nlibrary(doFuture)\nregisterDoFuture()\n\nplan(multisession, workers = 8)  # or multicore on Linux/macOS\n```\n\n### 4.2 Spark Cluster\n\n```r\nlibrary(sparklyr)\nsc <- spark_connect(master = \"spark://my‑cluster:7077\")\n\nspark_res <- fastml(\n  data       = credit_data,\n  label      = \"Status\",\n  algorithms = c(\"rand_forest\", \"linear_reg\"),\n  algorithm_engines = list(rand_forest = \"spark\",\n                           linear_reg  = \"spark\"),\n  metric     = \"roc_auc\",\n  n_cores    = 4)  # number of executor cores per worker\n```\n\n> Spark engines (*sparklyr* wrappers) offload model fitting to the cluster while `fastml` coordinates.\n\n### 4.3 H2O AutoML + fastml API\n\n```r\nlibrary(h2o)\nh2o.init(nthreads = -1)\n\nh2o_res <- fastml(\n  data       = credit_data,\n  label      = \"Status\",\n  algorithms = c(\"rand_forest\", \"logistic_reg\"),\n  algorithm_engines = list(rand_forest  = \"h2o\",\n                           logistic_reg = \"h2o\"),\n  metric     = \"roc_auc\",\n  impute_method = \"h2o\",   # optional custom imputation function\n  n_cores    = 4)\n```\n\n---\n\n  ## 5 · Learning Curves & Monitoring\n\n  ```r\nlc_res <- fastml(\n  data           = credit_data,\n  label          = \"Status\",\n  algorithms     = c(\"xgboost\"),\n  learning_curve = TRUE,\n  folds          = 5)\n```\n\nThe built‑in learning curve shows **ROC AUC** vs training fraction, helping spot under‑/over‑fitting.\n\n---\n\n  ## 6 · Ensembling / Stacking\n\n  While `fastml()` returns individual models, you can ensemble their predictions easily.\n\n```r\npred_dfs <- bayes_res$predictions  # nested list\n\n# Extract probabilities for the positive class across models\nprobs <- purrr::map_df(pred_dfs, ~ .x[[1]][, c(\".pred_bad\")], .id = \"Model\") %>%\n  bind_cols(truth = rep(credit_data$Status, times = length(pred_dfs)))\n\n# Simple average ensemble\nprobs$avg <- probs %>%\n  select(starts_with(\".pred_\")) %>%\n  rowMeans()\n\nlibrary(yardstick)\nroc_auc(probs, truth = truth, avg)\n```\n\nFor a tidy stacking pipeline use the **`stacks`** package and supply `fastml` workflows as candidates.\n\n---\n\n  ## 7 · Custom Metrics\n\n  Pass any `yardstick`-compatible summariser via `summaryFunction`.\n\n```r\ngeometric_mean <- function(data, ...) {\n  yardstick::mcc(data, ...)  # Matthew’s correlation coefficient as example\n}\n\ncustom_res <- fastml(\n  data      = credit_data,\n  label     = \"Status\",\n  algorithms = c(\"rand_forest\", \"xgboost\"),\n  summaryFunction = geometric_mean,\n  metric    = \"mcc\")\n```\n\n---\n\n  ## 8 · Save & Reload Best Model\n\n  ```r\nbest_wf <- bayes_res$best_model[[1]]\n\ntidymodels::write_rds(best_wf, \"models/best_credit_model.rds\")\n\n# later...\nloaded_wf <- readr::read_rds(\"models/best_credit_model.rds\")\npredict(loaded_wf, new_data = credit_data[1:3, ])\n```\n\n---\n\n  ## 9 · Frequently Asked Questions\n\n  | Question                                                       | Answer                                                                                                                                   |\n  | -------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |\n  | *“Can I tune across multiple engines for the same algorithm?”* | Yes – supply `algorithm_engines = list(rand_forest = c(\"ranger\", \"partykit\"))`. Each engine is tuned independently.                      |\n  | *“Why does tuning seem slow?”*                                 | Check `n_cores`, reduce `folds`, or switch to adaptive racing.                                                                           |\n  | *“How do I use a grouped time‑series CV?”*                     | Prepare `rsample::vfold_cv` object yourself and pass via `resampling_method = \"none\"`, then supply `resamples` (coming in next release). |\n\n  ---\n\n  ## 10 · Where to Next?\n\n  * **Explainability**: revisit `fastexplain()` with SHAP & PDPs on your best model.\n* **Production**: convert workflow to a **`vetiver`** model for API deployment.\n* **Automated monitoring**: schedule `fastml` re‑training with **GitHub Actions** or `cronR`.\n\nHappy modelling!\n\n  ---\n\n  ### Session Info\n\n  ```r\nsessionInfo()\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["styles.css"],"output-file":"fastml-advanced.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.30","theme":"cosmo","code-copy":true,"title":"Advanced Workflows with fastml()","editor":"visual"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}